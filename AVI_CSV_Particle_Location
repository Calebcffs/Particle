import os
import cv2
import numpy as np
import pandas as pd
import tkinter as tk
import random

from tkinter import filedialog, Tk, Label, Button, Entry, StringVar, DISABLED, NORMAL
from tkinter import ttk
from PIL import Image, ImageTk
import subprocess

# Global variables for the selected file path and CSV path
avi_file_path = None
csv_path = None

# Window list for displaying images
image_windows = []

def run_particle_detection():
    global avi_file_path, csv_path, image_windows

    # Get AVI file path from user input if not already set
    if not avi_file_path:
        avi_file_path = file_var.get()
        
    # Thresholds and size parameters from user input
    threshold = float(threshold_var.get())
    min_size = int(min_size_var.get())
    max_size = int(max_size_var.get())
    circularity_threshold = float(circularity_var.get())

    # List initialization for particle locations and detected frames
    particle_locations = []
    detected_frames = []
    particle_count = 0

    # Initialize video capture with the selected AVI file
    cap = cv2.VideoCapture(avi_file_path)
    if not cap.isOpened():
        print("Error opening video file.")
        return

    # Read the first frame to allow the user to select ROI
    ret, first_frame = cap.read()
    if not ret:
        print("Error reading the first frame from the video.")
        cap.release()
        return

    # User selects ROI on the first frame
    roi = cv2.selectROI(first_frame)
    cv2.destroyAllWindows()

    # ROI dimensions
    roi_width, roi_height = roi[2], roi[3]

    # Morphological operation kernel
    kernel = np.ones((5, 5), np.uint8)

    # Frame index for naming
    frame_index = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break  # End of video

        # Extract ROI from the frame
        roi_frame = frame[int(roi[1]):int(roi[1] + roi[3]), int(roi[0]):int(roi[0] + roi[2])]
        
        # Convert to grayscale and apply binarization and morphological operations
        gray_frame = cv2.cvtColor(roi_frame, cv2.COLOR_RGB2GRAY)
        inverted_gray_frame = cv2.bitwise_not(gray_frame)
        binarized_frame = (inverted_gray_frame > threshold).astype(np.uint8) * 255  # Binarization
        closed_frame = cv2.morphologyEx(binarized_frame, cv2.MORPH_CLOSE, kernel)

        # Contour detection and filtering based on size and circularity
        contours, _ = cv2.findContours(closed_frame, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        for contour in contours:
            area = cv2.contourArea(contour)
            perimeter = cv2.arcLength(contour, True)
            circularity = 4 * np.pi * area / (perimeter ** 2) if perimeter != 0 else 0

            if min_size <= area <= max_size and circularity >= circularity_threshold:
                particle_count += 1
                M = cv2.moments(contour)
                cx = int(M['m10'] / M['m00'])
                cy = int(M['m01'] / M['m00'])
                norm_cx = cx / roi_width  # Normalised x
                norm_cy = cy / roi_height  # Normalised y
                
                # Append particle info including area
                particle_locations.append([f"{os.path.basename(avi_file_path)}_frame_{frame_index}", cx, cy, norm_cx, norm_cy, circularity, area])
                detected_frames.append(closed_frame)

        frame_index += 1

        # Update UI elements
        progress['value'] = frame_index
        progress_label.config(text=f"Processing Frame {frame_index}")
        particle_counter.config(text=f"Particles detected: {particle_count}")
        root.update_idletasks()

    cap.release()

    # Save particle locations to a CSV file including area
    df = pd.DataFrame(particle_locations, columns=['filename', 'x_coordinate', 'y_coordinate', 'norm_x', 'norm_y', 'circularity', 'area'])
    #csv_path = os.path.splitext(avi_file_path)[0] + '_particle_locations.csv'
    csv_path = r'\Users\CalebClayton\OneDrive\NUS\FYP\Experiments\Thesis compiled csv files 18-4-24' + '_particle_locations.csv'
    df.to_csv(csv_path, index=False)
    
    # Open the CSV file automatically
    subprocess.Popen(['start', 'excel', csv_path], shell=True)

    # Display sample detected frames ensuring they are visible
    display_sample_images(detected_frames)

    # Update completion UI elements
    completion_label.config(text="Detection complete.")
    view_data_btn.config(state=NORMAL)
    close_img_btn.config(state=NORMAL)

def display_sample_images(detected_frames):
    global image_windows
    image_windows = []
    
    # Select a sample of 10 images or all if less than 10
    sample_frames = random.sample(detected_frames, 10) if len(detected_frames) >= 10 else detected_frames

    for frame in sample_frames:
        win = tk.Toplevel(root)
        win.title("Random Sample of Detected Particles")

        # Ensure the binarised images are visible by converting the binary mask to a 3-channel image
        visible_frame = cv2.cvtColor(frame, cv2.COLOR_GRAY2BGR)  # Convert grayscale to BGR
        img = ImageTk.PhotoImage(image=Image.fromarray(visible_frame))

        # Display the image in a new window
        label = tk.Label(win, image=img)
        label.image = img  # Keep a reference
        label.pack()

        # Add the window to the list for future reference
        image_windows.append(win)

def close_all_images():
    for win in image_windows:
        win.destroy()

def open_csv():
    os.system(f'start excel "{csv_path}"')

# Initialize the main application window
root = Tk()
root.title("Particle Detection from AVI Video")

# Set up UI elements for file selection and parameter input
file_var = StringVar()
Label(root, text="AVI file path: ").grid(row=0, column=0)
file_entry = Entry(root, textvariable=file_var)
file_entry.grid(row=0, column=1)
Button(root, text="Choose File", command=lambda: file_var.set(filedialog.askopenfilename(filetypes=[("AVI files", "*.avi")]))).grid(row=0, column=2)

threshold_var = StringVar(value="130")
Label(root, text="Binarisation Threshold: ").grid(row=1, column=0)
Entry(root, textvariable=threshold_var).grid(row=1, column=1)

min_size_var = StringVar(value="20")
Label(root, text="Min Size: ").grid(row=2, column=0)
Entry(root, textvariable=min_size_var).grid(row=2, column=1)

max_size_var = StringVar(value="2000")
Label(root, text="Max Size: ").grid(row=3, column=0)
Entry(root, textvariable=max_size_var).grid(row=3, column=1)

circularity_var = StringVar(value="0.5")
Label(root, text="Circularity: ").grid(row=4, column=0)
Entry(root, textvariable=circularity_var).grid(row=4, column=1)

# Run detection button
Button(root, text="Run Detection", command=run_particle_detection).grid(row=5, column=0, columnspan=3)

# Progress bar and labels
progress = ttk.Progressbar(root, orient='horizontal', length=300, mode='determinate')
progress.grid(row=6, column=0, columnspan=3, pady=10)
progress_label = Label(root, text="Awaiting input...")
progress_label.grid(row=7, column=0, columnspan=3)
particle_counter = Label(root, text="Particles detected: 0")
particle_counter.grid(row=8, column=0, columnspan=3)

completion_label = Label(root, text="")
completion_label.grid(row=9, column=0, columnspan=3)

# Buttons for data viewing and image closing
view_data_btn = Button(root, text="View Data", command=open_csv, state=DISABLED)
view_data_btn.grid(row=10, column=0, columnspan=3)
close_img_btn = Button(root, text="Close All Images", command=close_all_images, state=DISABLED)
close_img_btn.grid(row=11, column=0, columnspan=3)

# Start the application
root.mainloop()
